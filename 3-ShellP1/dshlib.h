#ifndef __DSHLIB_H__
#define __DSHLIB_H__

// Constants for command structure sizes
#define EXE_MAX 64
#define ARG_MAX 256
#define CMD_MAX 8
// Longest command that can be read from the shell
#define SH_CMD_MAX EXE_MAX + ARG_MAX

typedef struct command
{
    char exe[EXE_MAX];
    char args[ARG_MAX];
} command_t;

typedef struct command_list
{
    int num;
    command_t commands[CMD_MAX];
} command_list_t;

// Special character #defines
#define SPACE_CHAR ' '
#define PIPE_CHAR '|'
#define PIPE_STRING "|"

#define SH_PROMPT "dsh> "
#define EXIT_CMD "exit"
#define DRAGON_CMD "dragon"

// Standard Return Codes
#define OK 0
#define WARN_NO_CMDS -1
#define ERR_TOO_MANY_COMMANDS -2
#define ERR_CMD_OR_ARGS_TOO_BIG -3

// starter code
#define M_NOT_IMPL "The requested operation is not implemented yet!\n"
#define EXIT_NOT_IMPL 3
#define NOT_IMPLEMENTED_YET 0

// prototypes
int build_cmd_list(char *cmd_line, command_list_t *clist);

// output constants
#define CMD_OK_HEADER "PARSED COMMAND LINE - TOTAL COMMANDS %d\n"
#define CMD_WARN_NO_CMD "warning: no commands provided\n"
#define CMD_ERR_PIPE_LIMIT "error: piping limited to %d commands\n"

#define DRAGON_ART_ARRAY { 32, 72, 64, 1, 37, 4, 32, 23, 10, 1, 32, 69, 37, 6, 32, 25, 10, 1, 32, 68, 37, 6, 32, 26, 10, 1, 32, 65, 37, 1, 32, 1, 37, 7, 32, 11, 64, 1, 32, 14, 10, 1, 32, 64, 37, 10, 32, 8, 37, 7, 32, 11, 10, 1, 32, 39, 37, 7, 32, 2, 37, 4, 64, 1, 32, 9, 37, 12, 64, 1, 32, 4, 37, 6, 32, 2, 64, 1, 37, 4, 32, 8, 10, 1, 32, 34, 37, 22, 32, 6, 37, 28, 32, 10, 10, 1, 32, 32, 37, 26, 32, 3, 37, 12, 32, 1, 37, 15, 32, 11, 10, 1, 32, 31, 37, 29, 32, 1, 37, 19, 32, 5, 37, 3, 32, 12, 10, 1, 32, 29, 37, 28, 64, 1, 32, 1, 64, 1, 37, 18, 32, 8, 37, 2, 32, 12, 10, 1, 32, 28, 37, 33, 32, 1, 37, 22, 32, 16, 10, 1, 32, 28, 37, 58, 32, 14, 10, 1, 32, 28, 37, 50, 64, 1, 37, 6, 64, 1, 32, 14, 10, 1, 32, 6, 37, 8, 64, 1, 32, 11, 37, 16, 32, 8, 37, 26, 32, 6, 37, 2, 32, 16, 10, 1, 32, 4, 37, 13, 32, 9, 37, 2, 64, 1, 37, 12, 32, 11, 37, 11, 32, 1, 37, 12, 32, 6, 64, 1, 37, 1, 32, 16, 10, 1, 32, 2, 37, 10, 32, 3, 37, 3, 32, 8, 37, 14, 32, 12, 37, 24, 32, 24, 10, 1, 32, 1, 37, 9, 32, 7, 37, 1, 32, 9, 37, 13, 32, 13, 37, 12, 64, 1, 37, 11, 32, 23, 10, 1, 37, 9, 64, 1, 32, 16, 37, 1, 32, 1, 37, 13, 32, 12, 64, 1, 37, 25, 32, 21, 10, 1, 37, 8, 64, 1, 32, 17, 37, 2, 64, 1, 37, 12, 32, 12, 64, 1, 37, 28, 32, 18, 10, 1, 37, 7, 64, 1, 32, 19, 37, 15, 32, 11, 37, 33, 32, 14, 10, 1, 37, 10, 32, 18, 37, 15, 32, 10, 37, 35, 32, 6, 37, 4, 32, 2, 10, 1, 37, 9, 64, 1, 32, 19, 64, 1, 37, 14, 32, 9, 37, 12, 64, 1, 32, 1, 37, 4, 32, 1, 37, 17, 32, 3, 37, 8, 10, 1, 37, 10, 32, 18, 37, 17, 32, 8, 37, 13, 32, 6, 37, 18, 32, 1, 37, 9, 10, 1, 37, 9, 64, 1, 37, 2, 64, 1, 32, 16, 37, 16, 64, 1, 32, 7, 37, 14, 32, 5, 37, 24, 32, 2, 37, 2, 10, 1, 32, 1, 37, 10, 32, 18, 37, 1, 32, 1, 37, 14, 64, 1, 32, 8, 37, 14, 32, 3, 37, 26, 32, 1, 37, 2, 10, 1, 32, 2, 37, 12, 32, 2, 64, 1, 32, 11, 37, 18, 32, 8, 37, 40, 32, 2, 37, 3, 32, 1, 10, 1, 32, 3, 37, 13, 32, 1, 37, 2, 32, 2, 37, 1, 32, 2, 37, 1, 64, 1, 32, 1, 37, 18, 32, 10, 37, 37, 32, 4, 37, 3, 32, 1, 10, 1, 32, 4, 37, 18, 32, 1, 37, 22, 32, 11, 64, 1, 37, 31, 32, 4, 37, 7, 32, 1, 10, 1, 32, 5, 37, 39, 32, 14, 37, 28, 32, 8, 37, 3, 32, 3, 10, 1, 32, 6, 64, 1, 37, 35, 32, 18, 37, 25, 32, 15, 10, 1, 32, 8, 37, 32, 32, 22, 37, 19, 32, 2, 37, 7, 32, 10, 10, 1, 32, 11, 37, 26, 32, 27, 37, 15, 32, 2, 64, 1, 37, 9, 32, 9, 10, 1, 32, 14, 37, 20, 32, 11, 64, 1, 37, 1, 64, 1, 37, 1, 32, 18, 64, 1, 37, 18, 32, 3, 37, 3, 32, 8, 10, 1, 32, 18, 37, 15, 32, 8, 37, 10, 32, 20, 37, 15, 32, 4, 37, 1, 32, 9, 10, 1, 32, 16, 37, 36, 32, 22, 37, 14, 32, 12, 10, 1, 32, 16, 37, 26, 32, 2, 37, 4, 32, 1, 37, 3, 32, 22, 37, 10, 32, 2, 37, 3, 64, 1, 32, 10, 10, 1, 32, 21, 37, 19, 32, 1, 37, 6, 32, 1, 37, 2, 32, 26, 37, 13, 64, 1, 32, 10, 10, 1, 32, 81, 37, 7, 64, 1, 32, 7, 0 }

#endif